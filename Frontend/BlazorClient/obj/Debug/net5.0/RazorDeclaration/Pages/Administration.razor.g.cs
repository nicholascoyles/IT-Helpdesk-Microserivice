// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using BlazorClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using BlazorClient.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\Pages\Administration.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\Pages\Administration.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\Pages\Administration.razor"
using BlazorClient.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/administration")]
    public partial class Administration : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 183 "C:\Users\User\Desktop\Code submission\NicholasHelpDesk\Frontend\BlazorClient\Pages\Administration.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Admin = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;





    private IEnumerable<Ticket> Tickets = new List<Ticket>();
    private List<Category> Categories = new List<Category>();
    private List<Status> Statuses = new List<Status>();
    private List<Priority> Priorities = new List<Priority>();



    protected override async Task OnInitializedAsync()
    {
        Guid StatusId = new Guid("9853a3dc-6c18-4215-81ee-cdfff42a62e1");
        Tickets = await TicketService.GetTicketsByStatus(StatusId);
        Categories = await TicketService.GetCategory();
        Priorities = await TicketService.GetPriority();
        Statuses = await TicketService.GetStatus();
        var RoleResult = await _RoleManager.FindByNameAsync(Admin);
        if (RoleResult == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(Admin));
        }
        var user = await _UserManager.FindByNameAsync("nicholasadmin@email.com");
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, Admin);
            if (!UserResult)
            {
                await _UserManager.AddToRoleAsync(user, Admin);
            }
        }
        CurrentUser = (await authenticationStateTask).User;
        GetUsers();
    }

    IdentityUser objUser = new IdentityUser();
    string CurrentUserRole { get; set; } = "Users";
    List<IdentityUser> userList = new List<IdentityUser>();
    List<string> Options = new List<string>() { "Users", "Administrators" };
    string strError = "";
    bool Modal = false;

    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        objUser.Id = "";
        Modal = true;
    }
    async Task SaveUser()
    {
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        user.Email = objUser.Email;
        await _UserManager.UpdateAsync(user);
        if (objUser.PasswordHash != "*****")
        {
            var resetToken =
                await _UserManager.GeneratePasswordResetTokenAsync(user);
            var passworduser =
                await _UserManager.ResetPasswordAsync(
                    user,
                    resetToken,
                    objUser.PasswordHash);
            if (!passworduser.Succeeded)
            {
                if (passworduser.Errors.FirstOrDefault() != null)
                {
                    strError =
                        passworduser
                        .Errors
                        .FirstOrDefault()
                        .Description;
                }
                else
                {
                    strError = "Pasword error";
                }
                return;
            }
        }

        var UserResult =
            await _UserManager
            .IsInRoleAsync(user, Admin);

        if (
            (CurrentUserRole == Admin)
            &
            (!UserResult))
        {
            await _UserManager
                .AddToRoleAsync(user, Admin);
        }
        else
        {

            if ((CurrentUserRole != Admin)
                &
                (UserResult))
            {
                await _UserManager
                    .RemoveFromRoleAsync(user, Admin);
            }
        }
    }

    async Task EditUser(IdentityUser _IdentityUser)
    {

        objUser = _IdentityUser;
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var UserResult =
                await _UserManager
                .IsInRoleAsync(user, Admin);
            if (UserResult)
            {
                CurrentUserRole = Admin;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        Modal = true;
    }






    async Task DeleteUser()
    {
        Modal = false;
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }
        GetUsers();
    }
    void ClosePopup()
    {
        Modal = false;
    }

    public void GetUsers()
    {
        strError = "";
        userList = new List<IdentityUser>();
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            userList.Add(item);
        }
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazorClient.Services.ITicketService TicketService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RoleManager<IdentityRole> _RoleManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<IdentityUser> _UserManager { get; set; }
    }
}
#pragma warning restore 1591
