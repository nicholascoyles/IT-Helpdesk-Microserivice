@page "/editticket/{TicketId}"
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using BlazorClient.Models

@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BlazorClient.Services.ITicketService TicketService

<AuthorizeView Context="authContext">
    <Authorized>
        <!--Checks if user is Admin-->
        @if (authContext.User.IsInRole(Admin))
        {
            <!--Error if ticket can't be recieved-->
            @if (CurrentTicket == null)
            {
                <span>Loading Ticket from database....</span>
            }
            else
            {

                <h2>Update Ticket</h2>
                <hr />
                <p>
                    <a href="/ticketlist">Back</a>
                </p>
                <form>
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="FaqQuestion" class="control-label">Title</label>
                                <input form="FaqQuestion" class="form-control" @bind="@CurrentTicket.Title" />
                            </div>
                            <div class="form-group">
                                <label for="FaqAnswer" class="control-label">Descriprion</label>
                                <input form="FaqAnswer" class="form-control" @bind="@CurrentTicket.Description" />
                            </div>
                            <div>
                                <label>Category</label>
                                <select @bind="@CurrentTicket.CategoryId">
                                    <option selected disabled="true">Select category</option>
                                    @foreach (var item in Categories)
                                    {
                                        <option value="@item.CategoryId">@item.Name</option>
                                    }

                                </select>
                            </div>
                            <div class="form-group">
                                <label>Priority</label>
                                <select @bind="@CurrentTicket.PriorityId">
                                    <option selected disabled="true">Select priority</option>
                                    @foreach (var item in Priorities)
                                    {
                                        <option value="@item.PriorityId">@item.Name</option>
                                    }

                                </select>
                            </div>
                            <div class="form-group">
                                <label>Status</label>
                                <select @bind="@CurrentTicket.StatusId">
                                    <option selected disabled="true">Select Status</option>
                                    @foreach (var item in Statuses)
                                    {
                                        <option value="@item.StatusId">@item.Name</option>
                                    }

                                </select>
                            </div>
                        </div>
                    </div>




                </form>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <input type="button" class="btn btn-success" @onclick="@UpdateTicket" value="Update" />
                            <input type="button" class="btn btn-danger" @onclick="@DeleteTicket" value="Delete" />

                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <!--If user is not an admin-->
            <p>You're not signed in as a user in @Admin.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Please log in.</p>
    </NotAuthorized>
</AuthorizeView>




@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Admin = "Administrators";

    private BlazorClient.Models.Ticket CurrentTicket;

    private List<Category> Categories = new List<Category>();
    private List<Status> Statuses = new List<Status>();
    private List<Priority> Priorities = new List<Priority>();



    [Parameter]
    public string TicketId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentTicket = await TicketService.GetTicketById(TicketId);
        Categories = await TicketService.GetCategory();
        Priorities = await TicketService.GetPriority();
        Statuses = await TicketService.GetStatus();

    }

    protected async Task UpdateTicket()
    {
        await Http.SendJsonAsync(HttpMethod.Put, "https://localhost:5008/api/ticketlist/" + TicketId, CurrentTicket);
        NavigationManager.NavigateTo("ticketlist");

    }

    protected async Task DeleteTicket()
    {
        await Http.SendJsonAsync(HttpMethod.Delete, "https://localhost:5008/api/ticketlist/" + TicketId, CurrentTicket);
        NavigationManager.NavigateTo("ticketlist");

    }
}
